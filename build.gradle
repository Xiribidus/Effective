plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
// Adds a few utility methods like getProjectProperty
apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/utilities.gradle'
apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle'

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/effective.accesswidener")
}

repositories {
	// publishing
	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven"
	}

	// cloth config
	maven { url "https://maven.shedaniel.me/" }

	// satin
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	// mod menu
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}

	maven { url 'https://jitpack.io' }

	maven {
		name "modrinth"
		url "https://api.modrinth.com/maven"
	}

	maven { url 'https://masa.dy.fi/maven' }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier "intermediary-v2" }
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one

	// mod menu
	modCompileOnly "com.terraformersmc:modmenu:${mod_menu_version}"
	modRuntimeOnly "com.terraformersmc:modmenu:${mod_menu_version}"

	// midnightlib
	modImplementation include("maven.modrinth:midnightlib:${midnightlib_version}-fabric")

	// lodestone lib
	modImplementation include("com.github.Arathain:LodestoneLib-Quilt:1.19.3-SNAPSHOT")

	// satin
	modImplementation include("io.github.ladysnake:satin:${satin_version}")

	// iris and sodium
	modCompileOnly("maven.modrinth:sodium:${project.sodium_version}")
	modRuntimeOnly("maven.modrinth:sodium:${project.sodium_version}")
	modRuntimeOnly("io.github.douira:glsl-transformer:2.0.0-pre8")
	modRuntimeOnly("maven.modrinth:iris:${project.iris_version}")
	runtimeOnly compileOnly("org.anarres:jcpp:1.4.14") // for iris
	include 'com.moandjiezana.toml:toml4j:0.7.2'
	implementation 'com.moandjiezana.toml:toml4j:0.7.2'
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}


task checkGitStatus() {
	group = 'publishing'
	description = 'Checks that the git repository is in a state suitable for release'
	doLast {
		if (grgit == null) throw new RuntimeException('No git repository')
		if (!grgit.status().isClean()) {
			throw new RuntimeException("Git repository not ready for release (${grgit.status()})")
		}
		def currentBranch = grgit.branch.current().getName()
		grgit.fetch()
		if (grgit.tag.list().any { it.name == project.version }) {
			throw new RuntimeException("A tag already exists for ${project.version}")
		}
		def status = grgit.branch.status(name: currentBranch)
		if (status.aheadCount != 0) {
			throw new RuntimeException('Some commits have not been pushed')
		}
		if (status.behindCount != 0) {
			throw new RuntimeException('Some commits have not been pulled')
		}
	}
}

githubRelease {
	repo "Effective"
	token "${getProjectProperty('github_releases_token')}"
	// default owner: last component of maven group
	// default repo: name of the project
	tagName = project.version
	targetCommitish = { grgit.branch.current().name }
	body = { project.getChangelogText() }

	FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains('-dev.jar') }
	releaseAssets = { jar.destinationDirectory.asFile.get().listFiles filter }
}
tasks.githubRelease.dependsOn(checkGitStatus)

curseforge {

	if (project.getProjectProperty('curse_key') != null) {
		apiKey = project.getProjectProperty('curse_key')
	}

	if (project.hasProperty('curseforge_id')) {
		project {
			id = findProperty('curseforge_id')

			releaseType = project.release_type

			//usually automatically determined by the CurseGradle plugin, but won't work with fabric
			"${project.curseforge_versions}".split('; ').each {
				addGameVersion it
			}
			addGameVersion 'Quilt'

			mainArtifact(remapJar) {
				displayName = "${project.name}-${project.version}.jar"

				if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
					relations {
						if (project.hasProperty('cf_requirements')) {
							"${project.cf_requirements}".split('; ').each {
								requiredDependency "${it}"
							}
						}
						if (project.hasProperty('cf_optionals')) {
							"${project.cf_optionals}".split('; ').each {
								optionalDependency "${it}"
							}
						}
						if (project.hasProperty('cf_embeddeds')) {
							"${project.cf_embeddeds}".split('; ').each {
								embeddedLibrary "${it}"
							}
						}
						if (project.hasProperty('cf_tools')) {
							"${project.cf_tools}".split('; ').each {
								tool "${it}"
							}
						}
						if (project.hasProperty('cf_incompatibles')) {
							"${project.cf_incompatibles}".split('; ').each {
								incompatible "${it}"
							}
						}
						if (project.hasProperty('cf_includes')) {
							"${project.cf_includes}".split('; ').each {
								include "${it}"
							}
						}
					}
				}
			}

			changelogType = 'markdown'
			changelog = project.getChangelogText()

			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

tasks.curseforge.dependsOn(checkGitStatus)

task release(dependsOn: [tasks.githubRelease, tasks.curseforge]) {
	group = 'publishing'
	description = 'Releases a new version to Github and Curseforge'
}
